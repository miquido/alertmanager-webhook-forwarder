version: 2.1
# orbs:
#   codecov: codecov/codecov@1.0.5
aliases:
  - &dump-env-vars
    run:
      name: Dump env for hash
      command: |-
        echo "GOLANG_TAG=$GOLANG_TAG" >> dumped.env;
        cat dumped.env;

  - &restore-docker-cache
    restore_cache:
      keys:
        - docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}-{{ checksum "docker-compose.yml" }}-{{ checksum "go.sum" }}
        - docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}-{{ checksum "docker-compose.yml" }}
        - docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}
        - docker-{{ checksum "dumped.env" }}
        - docker

  - &load-docker-cache
    run:
      name: Load Docker layer cache
      command: |-
        # credits to: https://blog.jondh.me.uk/2018/04/strategies-for-docker-layer-caching-in-circleci/
        set +o pipefail
        if [ -f /home/circleci/caches/${CIRCLE_PROJECT_REPONAME}.tar.gz ]; then
          gunzip -c /home/circleci/caches/${CIRCLE_PROJECT_REPONAME}.tar.gz | docker load;
          docker images;
        fi

  - &docker-compose-build
    run:
      name: Docker-Compose Build
      command: docker-compose build --pull $DOCKER_COMPOSE_SERVICES

  - &release-version
    run:
      name: Release version
      command: docker-compose run --rm releaser

  - &code-style-analysis
    run:
      name: Code style analysis
      command: docker-compose run --rm lint

  - &binary-execution-test
    run:
      name: Checks whether binary executes properly (should print help message)
      command: docker-compose run --rm cli

  - &export-docker-cache
    run:
      name: Export Docker image layer cache
      command: |-
        mkdir -p /home/circleci/caches
        docker-compose build $DOCKER_COMPOSE_SERVICES | grep '\-\-\->' | grep -v 'Using cache' | sed -e 's/[ >-]//g' > /tmp/layers.txt
        docker save $(cat /tmp/layers.txt) | gzip > /home/circleci/caches/${CIRCLE_PROJECT_REPONAME}.tar.gz

  - &save-docker-cache
    save_cache:
      key: docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}-{{ checksum "docker-compose.yml" }}-{{ checksum "go.sum" }}
      paths:
        - /home/circleci/caches

  - &get-current-version-env
    run:
      name: Export current version from tag to env variable
      command: |-
        CURRENT_VERSION="$(git describe --abbrev=0 --tags | sed -E 's/v(.*)/\1/')"
        if [ "" == "$CURRENT_VERSION" ]; then CURRENT_VERSION="0.0.0"; fi
        echo "CURRENT_VERSION=$CURRENT_VERSION"
        echo "export CURRENT_VERSION='$CURRENT_VERSION'" >> $BASH_ENV

  - &set-tag-env
    run:
      name: Set current version to tag env variable
      command: |-
        echo "TAG=$CURRENT_VERSION"
        echo "export TAG='$CURRENT_VERSION'" >> $BASH_ENV

  - &docker-login
    run:
      name: Login to docker registry
      command: echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USERNAME" --password-stdin "$REGISTRY"

  - &docker-compose-push
    run:
      name: Push built image to docker registry
      command: docker-compose push $DOCKER_COMPOSE_SERVICES

  # Build environments
  - &docker-env
    working_directory: ~/workdir
    machine:
      enabled: true
      # Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      image: ubuntu-1604:201903-01

  # Steps
  - &docker-default
    steps:
      - checkout
      - *dump-env-vars
      - *restore-docker-cache
      - *load-docker-cache
      - *docker-compose-build
      - *binary-execution-test
      - *code-style-analysis
      - *export-docker-cache
      - *save-docker-cache

  - &docker-deploy-artifacts
    steps:
      - checkout
      - *dump-env-vars
      - *restore-docker-cache
      - *load-docker-cache
      - *get-current-version-env
      - *set-tag-env
      - *docker-compose-build
      - *docker-login
      - *docker-compose-push
      - *export-docker-cache
      - *save-docker-cache

  - &docker-release-version
    steps:
      - checkout
      - *docker-compose-build
      - *release-version

  # Filters
  - &pull-request-checks-job-filters
    filters:
      branches:
        ignore:
          - master

  - &release-job-filters
    filters:
      tags:
        ignore: /.*/
      branches:
        only:
          - master

  - &post-release-job-filters
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

jobs:
  go-default:
    <<: *docker-env
    <<: *docker-default
    environment:
      DOCKER_COMPOSE_SERVICES: "cli lint"
      GOLANG_TAG: 1.13.1-alpine3.10

  go-latest:
    <<: *docker-env
    <<: *docker-default
    environment:
      DOCKER_COMPOSE_SERVICES: "cli lint"
      GOLANG_TAG: alpine

  release-version:
    <<: *docker-env
    <<: *docker-release-version
    environment:
      DOCKER_COMPOSE_SERVICES: releaser
      DRY_RUN: "0"

  release-version-dry-run:
    <<: *docker-env
    <<: *docker-release-version
    environment:
      DOCKER_COMPOSE_SERVICES: releaser
      DRY_RUN: "1"

  validate-commit-message:
    docker:
      - image: node:lts-alpine
    steps:
      - checkout
      - run:
          name: Install git
          command: apk add --no-cache git
      - run:
          name: Install commitlint
          command: |-
            npm config set unsafe-perm true
            npm i -g @commitlint/cli @commitlint/config-conventional
      - run:
          name: Validate commit message format
          command: commitlint --from=HEAD~1 -V

  deploy-artifacts:
    <<: *docker-env
    <<: *docker-deploy-artifacts
    environment:
      GOLANG_TAG: 1.13.1-alpine3.10
      APP: alertmanager-webhook-forwarder
      DOCKER_COMPOSE_SERVICES: cli

workflows:
  version: 2.1
  pull-request-checks:
    jobs:
      - validate-commit-message:
          <<: *pull-request-checks-job-filters
      - release-version-dry-run:
          <<: *pull-request-checks-job-filters
      - go-default:
          <<: *pull-request-checks-job-filters
      - go-latest:
          <<: *pull-request-checks-job-filters
  release:
    jobs:
      - validate-commit-message:
          <<: *release-job-filters
      - go-default:
          <<: *release-job-filters
      - go-latest:
          <<: *release-job-filters
      - release-version:
          <<: *release-job-filters
          requires:
            - go-latest
            - go-default
            - validate-commit-message
      - deploy-artifacts:
          <<: *post-release-job-filters
